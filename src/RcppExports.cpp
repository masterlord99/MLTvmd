// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// fft_arma
ComplexVector fft_arma(const NumericVector& y_);
RcppExport SEXP _MLvdm_fft_arma(SEXP y_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y_(y_SEXP);
    rcpp_result_gen = Rcpp::wrap(fft_arma(y_));
    return rcpp_result_gen;
END_RCPP
}
// ifft_arma
NumericVector ifft_arma(const ComplexVector& y_);
RcppExport SEXP _MLvdm_ifft_arma(SEXP y_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const ComplexVector& >::type y_(y_SEXP);
    rcpp_result_gen = Rcpp::wrap(ifft_arma(y_));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _MLvdm_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _MLvdm_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _MLvdm_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _MLvdm_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// tmp_dot_prod
double tmp_dot_prod(NumericVector& x, NumericVector& y);
RcppExport SEXP _MLvdm_tmp_dot_prod(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(tmp_dot_prod(x, y));
    return rcpp_result_gen;
END_RCPP
}
// complex_dot_prod
Rcomplex complex_dot_prod(ComplexVector& x, ComplexVector& y);
RcppExport SEXP _MLvdm_complex_dot_prod(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< ComplexVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(complex_dot_prod(x, y));
    return rcpp_result_gen;
END_RCPP
}
// complex_rowsum
Rcomplex complex_rowsum(const ComplexVector x);
RcppExport SEXP _MLvdm_complex_rowsum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const ComplexVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(complex_rowsum(x));
    return rcpp_result_gen;
END_RCPP
}
// complex_rowsum_matrix
ComplexVector complex_rowsum_matrix(const ComplexMatrix x);
RcppExport SEXP _MLvdm_complex_rowsum_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const ComplexMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(complex_rowsum_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// complex_abs
NumericVector complex_abs(ComplexVector x);
RcppExport SEXP _MLvdm_complex_abs(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(complex_abs(x));
    return rcpp_result_gen;
END_RCPP
}
// get_real
NumericVector get_real(ComplexVector& x);
RcppExport SEXP _MLvdm_get_real(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_real(x));
    return rcpp_result_gen;
END_RCPP
}
// get_im
NumericVector get_im(ComplexVector& x);
RcppExport SEXP _MLvdm_get_im(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_im(x));
    return rcpp_result_gen;
END_RCPP
}
// assign_im
ComplexVector assign_im(ComplexVector& x, const NumericVector& new_im);
RcppExport SEXP _MLvdm_assign_im(SEXP xSEXP, SEXP new_imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type new_im(new_imSEXP);
    rcpp_result_gen = Rcpp::wrap(assign_im(x, new_im));
    return rcpp_result_gen;
END_RCPP
}
// assign_re
ComplexVector assign_re(ComplexVector& x, const NumericVector& new_re);
RcppExport SEXP _MLvdm_assign_re(SEXP xSEXP, SEXP new_reSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type new_re(new_reSEXP);
    rcpp_result_gen = Rcpp::wrap(assign_re(x, new_re));
    return rcpp_result_gen;
END_RCPP
}
// add_re
void add_re(ComplexVector& x, const NumericVector& new_re);
RcppExport SEXP _MLvdm_add_re(SEXP xSEXP, SEXP new_reSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type new_re(new_reSEXP);
    add_re(x, new_re);
    return R_NilValue;
END_RCPP
}
// sub_re
void sub_re(ComplexVector& x, const NumericVector& new_re);
RcppExport SEXP _MLvdm_sub_re(SEXP xSEXP, SEXP new_reSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type new_re(new_reSEXP);
    sub_re(x, new_re);
    return R_NilValue;
END_RCPP
}
// mul_re
void mul_re(ComplexVector& x, const NumericVector& new_re);
RcppExport SEXP _MLvdm_mul_re(SEXP xSEXP, SEXP new_reSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type new_re(new_reSEXP);
    mul_re(x, new_re);
    return R_NilValue;
END_RCPP
}
// div_re
void div_re(ComplexVector& x, const NumericVector& new_re);
RcppExport SEXP _MLvdm_div_re(SEXP xSEXP, SEXP new_reSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type new_re(new_reSEXP);
    div_re(x, new_re);
    return R_NilValue;
END_RCPP
}
// div_vector
void div_vector(ComplexVector& x, const NumericVector& new_);
RcppExport SEXP _MLvdm_div_vector(SEXP xSEXP, SEXP new_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type new_(new_SEXP);
    div_vector(x, new_);
    return R_NilValue;
END_RCPP
}
// div_scalar
void div_scalar(ComplexVector& x, double scal);
RcppExport SEXP _MLvdm_div_scalar(SEXP xSEXP, SEXP scalSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type scal(scalSEXP);
    div_scalar(x, scal);
    return R_NilValue;
END_RCPP
}
// mul_scalar
void mul_scalar(ComplexVector& x, double scal);
RcppExport SEXP _MLvdm_mul_scalar(SEXP xSEXP, SEXP scalSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type scal(scalSEXP);
    mul_scalar(x, scal);
    return R_NilValue;
END_RCPP
}
// add_im
void add_im(ComplexVector& x, const NumericVector& new_im);
RcppExport SEXP _MLvdm_add_im(SEXP xSEXP, SEXP new_imSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type new_im(new_imSEXP);
    add_im(x, new_im);
    return R_NilValue;
END_RCPP
}
// fftshift_num
NumericVector fftshift_num(NumericVector x, bool inverse);
RcppExport SEXP _MLvdm_fftshift_num(SEXP xSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(fftshift_num(x, inverse));
    return rcpp_result_gen;
END_RCPP
}
// fftshift_com
ComplexVector fftshift_com(ComplexVector x, bool inverse);
RcppExport SEXP _MLvdm_fftshift_com(SEXP xSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(fftshift_com(x, inverse));
    return rcpp_result_gen;
END_RCPP
}
// vmd
List vmd(NumericVector signal, double tau, int alpha, int K, double tol, int N, int init, bool DC);
RcppExport SEXP _MLvdm_vmd(SEXP signalSEXP, SEXP tauSEXP, SEXP alphaSEXP, SEXP KSEXP, SEXP tolSEXP, SEXP NSEXP, SEXP initSEXP, SEXP DCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type init(initSEXP);
    Rcpp::traits::input_parameter< bool >::type DC(DCSEXP);
    rcpp_result_gen = Rcpp::wrap(vmd(signal, tau, alpha, K, tol, N, init, DC));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MLvdm_fft_arma", (DL_FUNC) &_MLvdm_fft_arma, 1},
    {"_MLvdm_ifft_arma", (DL_FUNC) &_MLvdm_ifft_arma, 1},
    {"_MLvdm_rcpparma_hello_world", (DL_FUNC) &_MLvdm_rcpparma_hello_world, 0},
    {"_MLvdm_rcpparma_outerproduct", (DL_FUNC) &_MLvdm_rcpparma_outerproduct, 1},
    {"_MLvdm_rcpparma_innerproduct", (DL_FUNC) &_MLvdm_rcpparma_innerproduct, 1},
    {"_MLvdm_rcpparma_bothproducts", (DL_FUNC) &_MLvdm_rcpparma_bothproducts, 1},
    {"_MLvdm_tmp_dot_prod", (DL_FUNC) &_MLvdm_tmp_dot_prod, 2},
    {"_MLvdm_complex_dot_prod", (DL_FUNC) &_MLvdm_complex_dot_prod, 2},
    {"_MLvdm_complex_rowsum", (DL_FUNC) &_MLvdm_complex_rowsum, 1},
    {"_MLvdm_complex_rowsum_matrix", (DL_FUNC) &_MLvdm_complex_rowsum_matrix, 1},
    {"_MLvdm_complex_abs", (DL_FUNC) &_MLvdm_complex_abs, 1},
    {"_MLvdm_get_real", (DL_FUNC) &_MLvdm_get_real, 1},
    {"_MLvdm_get_im", (DL_FUNC) &_MLvdm_get_im, 1},
    {"_MLvdm_assign_im", (DL_FUNC) &_MLvdm_assign_im, 2},
    {"_MLvdm_assign_re", (DL_FUNC) &_MLvdm_assign_re, 2},
    {"_MLvdm_add_re", (DL_FUNC) &_MLvdm_add_re, 2},
    {"_MLvdm_sub_re", (DL_FUNC) &_MLvdm_sub_re, 2},
    {"_MLvdm_mul_re", (DL_FUNC) &_MLvdm_mul_re, 2},
    {"_MLvdm_div_re", (DL_FUNC) &_MLvdm_div_re, 2},
    {"_MLvdm_div_vector", (DL_FUNC) &_MLvdm_div_vector, 2},
    {"_MLvdm_div_scalar", (DL_FUNC) &_MLvdm_div_scalar, 2},
    {"_MLvdm_mul_scalar", (DL_FUNC) &_MLvdm_mul_scalar, 2},
    {"_MLvdm_add_im", (DL_FUNC) &_MLvdm_add_im, 2},
    {"_MLvdm_fftshift_num", (DL_FUNC) &_MLvdm_fftshift_num, 2},
    {"_MLvdm_fftshift_com", (DL_FUNC) &_MLvdm_fftshift_com, 2},
    {"_MLvdm_vmd", (DL_FUNC) &_MLvdm_vmd, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_MLvdm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
